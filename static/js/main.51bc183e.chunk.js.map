{"version":3,"sources":["staticData.js","reducers/contact.js","reducers/users.js","reducers/index.js","reducers/activeuserID.js","reducers/messages.js","store/index.js","actions/setuserid.js","components/sidebar/components/user.js","components/sidebar/sidebar.js","components/main/empty/empty.js","components/main/chatwindow/components/header/header.js","components/main/chatwindow/components/chats/chats.js","actions/savemsg.js","components/main/chatwindow/components/inputarea/inputarea.js","components/main/chatwindow/chatwindow.js","components/main/main.js","App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","typing","activeUserId","combineReducers","state","arguments","undefined","activeuserID","action","type","payload","active_user_id","_action$payload","msg","userId","allUserMsgs","keys","pop","defineProperty","store","createStore","reducer","setuserid","userid","User","_ref","contact","react_default","a","createElement","className","onClick","_ref2","dispatch","setActiveUserId","bind","alt","src","Sidebar","values","getState","map","sidebar_components_user","key","main_empty_empty","props","_props$users$user","split","Header","profile","Chats","_this","this","message","ref","myRef","Component","savemsg","InputArea","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","target","value","setState","submithandler","preventDefault","id","_this2","placeholder","onChange","Chatwindow","chatsRef","header_header","chats_chats","inputarea_inputarea","empty","_store$getState","chatwindow","App","sidebar_sidebar","main_main","Boolean","window","location","hostname","match","console","log","ReactDOM","render","src_App_0","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51bc183e.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","import {contacts} from '../staticData';\nexport default (state={contacts:contacts}, action)=>{\n    return state;\n}","import {state} from '../staticData';\nconst user=state.user\nexport default (state={user:user}, action)=>{\n    return state;\n}","import {combineReducers} from 'redux';\nimport contacts from './contact';\nimport users from './users';\nimport messages from './messages'\nimport activeuserID from './activeuserID'\nexport default combineReducers({\n    contacts,\n    users,\n    activeuserID,\n    messages,\n  \n})","export default (state=null, action)=>{\n    const {type,payload}=action;\n    switch (type) {\n        case 'SET_USER_ID':\n            return({\n                active_user_id:payload\n                \n            })\n     default:\n    return state\n}}","import _ from 'lodash'\nimport {getMessages} from '../staticData'\nexport default (state=getMessages(10),action)=>{\n   \n    switch (action.type) {\n        case 'SAVE_USR_MSG':\n          const { msg, userId } = action.payload;\n          const allUserMsgs = state[userId];\n          const number = +_.keys(allUserMsgs).pop() + 1;\n    \n          return {\n            ...state,\n            [userId]: {\n              ...allUserMsgs,\n              [number]: {\n                number,\n                text: msg,\n                is_user_msg: true\n              }\n            }\n          };\n    \n        default:\n          return state;\n      }\n\n\n}","import {createStore} from 'redux';\nimport reducer from '../reducers/index';\n\n\nconst store=createStore(reducer)\n\nexport default store;","export default (userid)=>{\n    return({\n        type:'SET_USER_ID',\n        payload:userid\n    })\n   \n}","import React from \"react\";\nimport setActiveUserId from '../../../actions/setuserid'\nimport \"./user.css\";\nimport store from \"../../../store\";\nconst User = ({ contact }) => {\n  function handleUserClick({user_id}) {\n    store.dispatch(setActiveUserId({user_id}))\n    \n  }\n  return (\n    <div className=\"user\" onClick={handleUserClick.bind(null, contact)}>\n      <img className=\"userPic\" alt=\"loading..\" src={contact.profile_pic} />\n\n      <div className=\"user_details\">\n        <p className=\"user_name\">{contact.name}</p>\n        <p className=\"user_status\"> {contact.status}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport './sidebar.css';\nimport store from '../../store/index';\nimport User from './components/user';\nimport _ from 'lodash';\n\nconst Sidebar=()=>{\n    const contacts=_.values(store.getState().contacts.contacts)\n   \n    \n    return(\n        <aside className='sidebar' >\n            { contacts.map((contact)=>{return(<User contact={contact} key={contact.user_id}/>)})} \n        </aside>\n    )\n}\n \nexport default Sidebar","import React from \"react\";\nimport './empty.css'\nexport default (props) => {\n   const {name,profile_pic, status}=props.users.user;\n   \n  return (\n    <div className=\"Empty\">\n      <h1 className=\"Empty__name\">Welcome, {name.split(\" \")[0]}</h1>\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\n      <p className=\"Empty__status\">\n        <b>Status:</b> {status}\n      </p>\n      <button className=\"Empty__btn\">Start a conversation</button>\n      <p className=\"Empty__info\">\n        Search for someone to start chatting with or go to Contacts to see who\n        is available\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './header.css'\nconst Header=({profile})=>{\n    const {name,status}=profile;\n    return(\n        \n        <div className='header'>\n            <h3 className='name'>{name}</h3>\n            <p className='status'>{status}</p>            \n        </div>\n    )\n}\n\nexport default Header","import React,{Component} from \"react\";\nimport \"./chats.css\";\n\nclass Chats extends Component {\n  // constructor(props) {\n  //   super(props);\n  // //  this.chatsRef = React.createRef();\n  // }\n\n  // scrollToBottom = () => {\n  //   this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n  // };\n  // componentDidMount() {\n  //   this.scrollToBottom();\n  // }\n  // componentDidUpdate=()=> {\n  //   this.scrollToBottom();\n  // }\n\n\n  render()\n   {\n    return (<div className='chats'>\n      {this.props.messages.map((message, key) => {\n        return <p key={message.number} ref={this.myRef} className={message.is_user_msg ? \"right\" : \"left\"}>\n           \n            {message.text}\n          </p>;\n      })}\n     \n    </div>);\n  }\n\n}\n\nexport default Chats;\n","export default (msg,userid)=>{\n\n    return({\n        type:'SAVE_USR_MSG',\n        payload:{msg:msg,\n                 userId:userid}\n    })\n   \n}","import React, {Component} from 'react'\nimport './inputarea.css'\nimport store from '../../../../../store/index'\nimport savemsg from '../../../../../actions/savemsg'\nclass InputArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n        message:''\n    }\n  }\n  handleChange=(e)=>{\n    const msg=e.target.value;\n    \n\n    this.setState(()=>{\n        return({message:msg})\n    })\n  }\n \n  submithandler=(e)=>{\n      e.preventDefault()\n      const id=this.props.userid;\n      this.setState(()=>{\n        return({message:''})\n    })\n      store.dispatch(savemsg(this.state.message,id))\n  }\n  render() {\n    return (<div>\n            <form className='message'>\n                <input placeholder='type something' \n                value={this.state.message} \n                className=\"message_input\" \n                onChange={(e)=>this.handleChange(e)}>\n\n                </input>\n                <button className='submitbutton' \n                        type='button' \n                        onClick={(e)=>this.submithandler(e)} >\n                submit!!\n                </button>\n            </form>\n        </div>);\n  }\n\n}\n\nexport default InputArea","import React,{Component} from 'react';\nimport './chatwidow.css'\nimport Header from './components/header/header'\nimport Chats from './components/chats/chats'\nimport InputArea from './components/inputarea/inputarea'\nimport store from '../../../store/index'\nimport _ from 'lodash'\n\nclass Chatwindow extends Component {\n// constructor(props) {\n//     super(props);\n//   //  this.chatsRef = React.createRef();\n   \n//   }\n  \n  render() {\n      const users=store.getState()\n      const key=users.activeuserID.active_user_id.user_id;\n      const profile=users.contacts.contacts[key];\n      const messages=users.messages[key]\n    return (<div className='chatwindow ' ref={this.chatsRef}>\n            <Header profile={profile}/>\n            <Chats messages={_.values(messages)} chatsRef={this.chatsRef} />\n            <InputArea userid={profile.user_id}/>\n        \n\n        </div>);\n  }\n\n}\n\nexport default Chatwindow","import React,{Component} from 'react';\nimport Empty from './empty/empty';\nimport './main.css';\nimport store from '../../store/index' \nimport Chatwindow from './chatwindow/chatwindow'\nclass empty extends Component {\n \n\n  render() {\n    const {activeuserID,users}=store.getState();\n    \n    return (<div className='main'>\n           { !activeuserID ? \n            <Empty activeuserID={activeuserID}   users={users}/> :\n            <Chatwindow/>\n           }\n        </div>);\n  }\n\n}\nexport default empty","import React, { Component } from 'react';\nimport Sidebar from './components/sidebar/sidebar'\nimport Main from './components/main/main'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n     <div className='container'>\n       <Sidebar/>\n       <Main/>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index'\n\nfancyLog();\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nfunction fancyLog() {\n    console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #FFF\");\n    console.log(store.getState());\n  }\nconst render=()=>{\n    \n    ReactDOM.render(<App />, document.getElementById('root')); \n}\n\n\nstore.subscribe(render)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}